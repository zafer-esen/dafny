splitting-triggers-recovers-expressivity.dfy(12,10): Info: Selected triggers:
   {P(_t#0), Q(i)}, {P(_t#0), P(i)}
splitting-triggers-recovers-expressivity.dfy(17,11): Info: Selected triggers:
   {P(_t#0), Q(j)}, {P(_t#0), P(j)}
splitting-triggers-recovers-expressivity.dfy(26,10): Info: Selected triggers: {Q(i)}
 Rejected triggers: {P(i)} (may loop with "P(i + 1)")
splitting-triggers-recovers-expressivity.dfy(33,11): Info: Selected triggers: {Q(j)}
 Rejected triggers: {P(j)} (may loop with "P(j + 1)")
splitting-triggers-recovers-expressivity.dfy(44,10): Info: For expression "P(i) || !Q(i)":
   Selected triggers:
     {Q(i)}, {P(i)}
splitting-triggers-recovers-expressivity.dfy(44,10): Info: For expression "P(i + 1)":
   Selected triggers: {Q(i)}
   Rejected triggers: {P(i)} (may loop with "P(i + 1)")
splitting-triggers-recovers-expressivity.dfy(49,11): Info: For expression "j >= 0 ==> P(j)":
   Selected triggers:
     {Q(j)}, {P(j)} in subexpression at splitting-triggers-recovers-expressivity.dfy(49,59) [Related location] splitting-triggers-recovers-expressivity.dfy(49,64)
splitting-triggers-recovers-expressivity.dfy(49,11): Info: For expression "j >= 0 ==> Q(j) ==> P(j + 1)":
   Selected triggers: {Q(j)}
   Rejected triggers: {P(j)} (may loop with "P(j + 1)") in subexpression at splitting-triggers-recovers-expressivity.dfy(49,59) [Related location] splitting-triggers-recovers-expressivity.dfy(49,78)
splitting-triggers-recovers-expressivity.dfy(58,11): Info: Selected triggers:
   {P(i)}, {Q(i)}
splitting-triggers-recovers-expressivity.dfy(12,63): Error: a postcondition could not be proved on this return path
splitting-triggers-recovers-expressivity.dfy(12,10): Related location: this is the postcondition that could not be proved
splitting-triggers-recovers-expressivity.dfy(19,15): Error: a postcondition could not be proved on this return path
splitting-triggers-recovers-expressivity.dfy(19,10): Related location: this is the postcondition that could not be proved

Dafny program verifier finished with 5 verified, 2 errors
